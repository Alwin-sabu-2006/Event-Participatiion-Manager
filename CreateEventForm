import javax.swing.*;
import java.awt.*;
import javax.swing.border.EmptyBorder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.Year;

public class CreateEventForm {

    public static void createAndShowGUI() {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {}

        final JFrame eventFrame = new JFrame("Create New Event");
        eventFrame.setSize(500, 420);
        eventFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(6, 2, 10, 10));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

        JLabel nameLabel = new JLabel("Event Name:");
        final JTextField nameField = new JTextField();
        JLabel dateLabel = new JLabel("Event Date:");
        JPanel datePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        String[] days = new String[31];
        for (int i = 0; i < 31; i++) {
            days[i] = String.format("%02d", i + 1);
        }
        final JComboBox<String> dayBox = new JComboBox<>(days);
        String[] months = {"01-Jan", "02-Feb", "03-Mar", "04-Apr", "05-May", "06-Jun",
                           "07-Jul", "08-Aug", "09-Sep", "10-Oct", "11-Nov", "12-Dec"};
        final JComboBox<String> monthBox = new JComboBox<>(months);
        int currentYear = Year.now().getValue();
        String[] years = new String[6];
        for (int i = 0; i < 6; i++) {
            years[i] = String.valueOf(currentYear + i);
        }
        final JComboBox<String> yearBox = new JComboBox<>(years);
        datePanel.add(dayBox);
        datePanel.add(monthBox);
        datePanel.add(yearBox);
        JLabel locationLabel = new JLabel("Event Location:");
        final JTextField locationField = new JTextField();
        JLabel seatsLabel = new JLabel("Number of Seats:");
        final JTextField seatsField = new JTextField();
        JLabel descLabel = new JLabel("Description:");
        final JTextArea descArea = new JTextArea(4, 20);
        descArea.setLineWrap(true);
        descArea.setWrapStyleWord(true);
        JScrollPane descScrollPane = new JScrollPane(descArea);
        JButton createButton = new JButton("Create Event");
        JButton backButton = new JButton("Back");
        JPanel createPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        createPanel.add(createButton);
        JPanel backPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        backPanel.add(backButton);

        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String eventName = nameField.getText();
                String location = locationField.getText();
                String description = descArea.getText();
                String seatsText = seatsField.getText();
                String selectedDay = (String) dayBox.getSelectedItem();
                String selectedMonthStr = (String) monthBox.getSelectedItem();
                String selectedYear = (String) yearBox.getSelectedItem();
                String selectedMonth = selectedMonthStr.substring(0, 2);
                String eventDate = selectedYear + "-" + selectedMonth + "-" + selectedDay;
                int maxSeats;

                if (eventName.isEmpty() || location.isEmpty() || seatsText.isEmpty()) {
                    JOptionPane.showMessageDialog(eventFrame, "Please fill in Event Name, Location, and Number of Seats.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                try {
                    maxSeats = Integer.parseInt(seatsText);
                    if (maxSeats <= 0) throw new NumberFormatException();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(eventFrame, "Please enter a valid positive number for Seats.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                System.out.println("--- Create Event Button Clicked ---");
                System.out.println("Event Name: " + eventName);
                System.out.println("Date: " + eventDate);
                System.out.println("Location: " + location);
                System.out.println("Seats: " + maxSeats);
                System.out.println("Description: " + description);
                JOptionPane.showMessageDialog(eventFrame, "Event details printed to console (database connection removed).", "Action Performed", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Create Event Back button clicked - (Navigation Removed)");
            }
        });

        mainPanel.add(nameLabel);
        mainPanel.add(nameField);
        mainPanel.add(dateLabel);
        mainPanel.add(datePanel);
        mainPanel.add(locationLabel);
        mainPanel.add(locationField);
        mainPanel.add(seatsLabel);
        mainPanel.add(seatsField);
        mainPanel.add(descLabel);
        mainPanel.add(descScrollPane);
        mainPanel.add(backPanel);
        mainPanel.add(createPanel);

        eventFrame.add(mainPanel);
        eventFrame.setLocationRelativeTo(null);
        eventFrame.setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> createAndShowGUI());
    }
}
